// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Event struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	EventSeries *EventSeries `json:"eventSeries"`
}

type EventSeries struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type NewEvent struct {
	EventSeriesID string `json:"eventSeriesID"`
	Name          string `json:"name"`
}

type NewEventSeries struct {
	Name string `json:"name"`
}

type OriginalSong struct {
	ID          string   `json:"id"`
	Product     *Product `json:"product"`
	Name        string   `json:"name"`
	Composer    string   `json:"composer"`
	Arranger    string   `json:"arranger"`
	TrackNumber int      `json:"trackNumber"`
	Original    bool     `json:"original"`
	SourceID    string   `json:"sourceID"`
}

type Product struct {
	ID           string      `json:"id"`
	Name         string      `json:"name"`
	ShortName    string      `json:"shortName"`
	ProductType  ProductType `json:"productType"`
	SeriesNumber float64     `json:"seriesNumber"`
}

type ProductType string

const (
	ProductTypePc98                ProductType = "pc98"
	ProductTypeWindows             ProductType = "windows"
	ProductTypeZunsMusicCollection ProductType = "zuns_music_collection"
	ProductTypeAkyusUntouchedScore ProductType = "akyus_untouched_score"
	ProductTypeCommercialBooks     ProductType = "commercial_books"
	ProductTypeOther               ProductType = "other"
)

var AllProductType = []ProductType{
	ProductTypePc98,
	ProductTypeWindows,
	ProductTypeZunsMusicCollection,
	ProductTypeAkyusUntouchedScore,
	ProductTypeCommercialBooks,
	ProductTypeOther,
}

func (e ProductType) IsValid() bool {
	switch e {
	case ProductTypePc98, ProductTypeWindows, ProductTypeZunsMusicCollection, ProductTypeAkyusUntouchedScore, ProductTypeCommercialBooks, ProductTypeOther:
		return true
	}
	return false
}

func (e ProductType) String() string {
	return string(e)
}

func (e *ProductType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductType", str)
	}
	return nil
}

func (e ProductType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
